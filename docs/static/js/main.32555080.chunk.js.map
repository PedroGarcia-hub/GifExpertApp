{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrind.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrind","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBCJDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,8BACI,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,MASd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,+BCRlBG,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEZC,EAFY,qDAEyCC,UAAWH,GAFpD,+DAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIKA,EAAKC,OAJV,uBAIVC,EAJU,EAIVA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVvB,kBAcXM,GAdW,4CAAH,sDCCNO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OADAc,QAAQC,IAAI,CAAEN,KAAIC,QAAOV,QAErB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCJJS,EAAW,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEvB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WAEN1B,EAAOC,GACFtB,MAAK,SAAAgD,GAAI,OACNF,EAAS,CACLjB,KAAMmB,EACNJ,SAAS,SAItB,CAACtB,IAGGuB,EDjB0BI,CAAc3B,GAAlCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAErB,OACI,eAAC,WAAD,WAEI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAEjDsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEKL,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADCA,EAAIC,aEYfiB,EA3BM,WAGjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAMA,OACI,qCACI,6CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACK4C,EAAWpB,KAAI,SAACT,GAAD,OAChB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MClBzB8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1B1D,M","file":"static/js/main.32555080.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats=>[ inputValue, ...cats ] );\r\n            setInputValue('');\r\n        }\r\n        // console.log('Submit hecho');\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type='text'\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGif = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/stickers/search?q=${ encodeURI( category ) }&limit=10&api_key=BFE3MkUTGFK7UwozdGDZXKFTJ1EHrH5A`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    console.log({ id, title, url });\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrind = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n            { loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n\r\n            <div className='card-grid'>\r\n                \r\n                {images.map(img => (\r\n                    <GifGridItem \r\n                    key={ img.id }\r\n                    { ...img }\r\n                    />\r\n                ))}\r\n\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGif(category)\r\n            .then(imgs =>\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            );\r\n\r\n    }, [category])\r\n\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrind } from './components/GifGrind';\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () =>{\r\n    //     setCategories([...categories, 'HunterXHunter']);\r\n    // }\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExperApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            \r\n\r\n            <ol>\r\n                {categories.map((category) => (\r\n                <GifGrind\r\n                    key={category}\r\n                    category={category}/>) )}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}